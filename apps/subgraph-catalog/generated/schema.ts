// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { TypedMap, Entity, Value, ValueKind, store, Bytes, BigInt, BigDecimal } from '@graphprotocol/graph-ts'

export class KaraokeVersion extends Entity {
  constructor(id: Bytes) {
    super()
    this.set('id', Value.fromBytes(id))
  }

  save(): void {
    let id = this.get('id')
    assert(id != null, 'Cannot save KaraokeVersion entity without an ID')
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type KaraokeVersion must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      )
      store.set('KaraokeVersion', id.toBytes().toHexString(), this)
    }
  }

  static load(id: Bytes): KaraokeVersion | null {
    return changetype<KaraokeVersion | null>(store.get('KaraokeVersion', id.toHexString()))
  }

  get id(): Bytes {
    let value = this.get('id')
    return value!.toBytes()
  }

  set id(value: Bytes) {
    this.set('id', Value.fromBytes(value))
  }

  get id_karaoke_version(): Bytes {
    let value = this.get('id_karaoke_version')
    return value!.toBytes()
  }

  set id_karaoke_version(value: Bytes) {
    this.set('id_karaoke_version', Value.fromBytes(value))
  }

  get created_at(): BigInt {
    let value = this.get('created_at')
    return value!.toBigInt()
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value))
  }

  get curator_address(): Bytes {
    let value = this.get('curator_address')
    return value!.toBytes()
  }

  set curator_address(value: Bytes) {
    this.set('curator_address', Value.fromBytes(value))
  }

  get id_original_version(): string {
    let value = this.get('id_original_version')
    return value!.toString()
  }

  set id_original_version(value: string) {
    this.set('id_original_version', Value.fromString(value))
  }

  get uri_metadata(): string {
    let value = this.get('uri_metadata')
    return value!.toString()
  }

  set uri_metadata(value: string) {
    this.set('uri_metadata', Value.fromString(value))
  }

  get is_indexed(): boolean {
    let value = this.get('is_indexed')
    return value!.toBoolean()
  }

  set is_indexed(value: boolean) {
    this.set('is_indexed', Value.fromBoolean(value))
  }

  get metadata(): string | null {
    let value = this.get('metadata')
    if (!value || value.kind == ValueKind.NULL) {
      return null
    } else {
      return value.toString()
    }
  }

  set metadata(value: string | null) {
    if (!value) {
      this.unset('metadata')
    } else {
      this.set('metadata', Value.fromString(<string>value))
    }
  }
}

export class metadataKaraokeVersion extends Entity {
  constructor(id: string) {
    super()
    this.set('id', Value.fromString(id))
  }

  save(): void {
    let id = this.get('id')
    assert(id != null, 'Cannot save metadataKaraokeVersion entity without an ID')
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type metadataKaraokeVersion must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      )
      store.set('metadataKaraokeVersion', id.toString(), this)
    }
  }

  static load(id: string): metadataKaraokeVersion | null {
    return changetype<metadataKaraokeVersion | null>(store.get('metadataKaraokeVersion', id))
  }

  get id(): string {
    let value = this.get('id')
    return value!.toString()
  }

  set id(value: string) {
    this.set('id', Value.fromString(value))
  }

  get original_song_id(): string {
    let value = this.get('original_song_id')
    return value!.toString()
  }

  set original_song_id(value: string) {
    this.set('original_song_id', Value.fromString(value))
  }

  get original_song_title(): string {
    let value = this.get('original_song_title')
    return value!.toString()
  }

  set original_song_title(value: string) {
    this.set('original_song_title', Value.fromString(value))
  }

  get original_song_artist_id(): string {
    let value = this.get('original_song_artist_id')
    return value!.toString()
  }

  set original_song_artist_id(value: string) {
    this.set('original_song_artist_id', Value.fromString(value))
  }

  get original_song_artist_name(): string {
    let value = this.get('original_song_artist_name')
    return value!.toString()
  }

  set original_song_artist_name(value: string) {
    this.set('original_song_artist_name', Value.fromString(value))
  }

  get original_song_artwork_url(): string {
    let value = this.get('original_song_artwork_url')
    return value!.toString()
  }

  set original_song_artwork_url(value: string) {
    this.set('original_song_artwork_url', Value.fromString(value))
  }

  get original_song_audio_url(): string {
    let value = this.get('original_song_audio_url')
    return value!.toString()
  }

  set original_song_audio_url(value: string) {
    this.set('original_song_audio_url', Value.fromString(value))
  }

  get original_song_supporting_artist(): string {
    let value = this.get('original_song_supporting_artist')
    return value!.toString()
  }

  set original_song_supporting_artist(value: string) {
    this.set('original_song_supporting_artist', Value.fromString(value))
  }

  get title(): string {
    let value = this.get('title')
    return value!.toString()
  }

  set title(value: string) {
    this.set('title', Value.fromString(value))
  }

  get description(): string {
    let value = this.get('description')
    return value!.toString()
  }

  set description(value: string) {
    this.set('description', Value.fromString(value))
  }

  get uri_isolated_vocal_track(): string {
    let value = this.get('uri_isolated_vocal_track')
    return value!.toString()
  }

  set uri_isolated_vocal_track(value: string) {
    this.set('uri_isolated_vocal_track', Value.fromString(value))
  }

  get uri_isolated_instrumental_track(): string {
    let value = this.get('uri_isolated_instrumental_track')
    return value!.toString()
  }

  set uri_isolated_instrumental_track(value: string) {
    this.set('uri_isolated_instrumental_track', Value.fromString(value))
  }

  get uri_lrc(): string {
    let value = this.get('uri_lrc')
    return value!.toString()
  }

  set uri_lrc(value: string) {
    this.set('uri_lrc', Value.fromString(value))
  }

  get genre(): string {
    let value = this.get('genre')
    return value!.toString()
  }

  set genre(value: string) {
    this.set('genre', Value.fromString(value))
  }
}
